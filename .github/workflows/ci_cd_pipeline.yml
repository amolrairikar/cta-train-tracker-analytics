name: CTA Train Tracker Analytics App CI/CD Pipeline

on:
  push:

permissions:
  contents: read
  id-token: write

jobs:
  get_test_coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv lock
          pipenv install --dev

      - name: Copy retry_api_exceptions.py file
        run: |
          wget --tries=3 https://raw.githubusercontent.com/amolrairikar/aws-account-infrastructure-setup/refs/heads/main/layers/retry_api_exceptions/retry_api_exceptions.py
          cp retry_api_exceptions.py lambdas/write_train_lines/retry_api_exceptions.py
          cp retry_api_exceptions.py lambdas/get_train_status/retry_api_exceptions.py

      - name: Get test script and run tests
        run: |
          wget --tries=3 https://raw.githubusercontent.com/amolrairikar/aws-account-infrastructure-setup/refs/heads/main/scripts/run_tests.sh
          chmod +x run_tests.sh
          ./run_tests.sh --source lambdas --omit "lambdas/write_train_lines/retry_api_exceptions.py,lambdas/get_train_status/retry_api_exceptions.py"

  build_lambdas:
    runs-on: ubuntu-latest
    needs: get_test_coverage
    strategy:
      matrix:
        lambda:
          - name: get_train_status
            handler_file: get_train_status.py
            path: lambdas/get_train_status
          - name: write_train_lines
            handler_file: write_train_lines.py
            path: lambdas/write_train_lines
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up AWS credentials (using OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_VAR_INFRA_ROLE_ARN }}
          aws-region: "us-east-2"

      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Check if layer folder changed
        id: detect_lambda_change
        run: |
          wget --tries=3 https://raw.githubusercontent.com/amolrairikar/aws-account-infrastructure-setup/refs/heads/main/scripts/detect_lambda_changes.sh
          chmod +x ./detect_lambda_changes.sh
          ./detect_lambda_changes.sh "${{ matrix.lambda.path }}" "${{ github.event_name }}" "${{ github.base_ref }}" || CHANGED=$?
          if [[ "$CHANGED" -eq 1 ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Lambda package
        if: steps.detect_lambda_change.outputs.changed == 'true'
        run: |
          wget --tries=3 https://raw.githubusercontent.com/amolrairikar/aws-account-infrastructure-setup/refs/heads/main/scripts/build_lambda_package.sh
          chmod +x ./build_lambda_package.sh
          ./build_lambda_package.sh "${{ matrix.lambda.name }}" "${{ matrix.lambda.handler_file }}" "${{ matrix.lambda.path }}"

      - name: Upload Lambda layer to S3
        if: steps.detect_lambda_change.outputs.changed == 'true'
        run: |
          aws s3 cp "${{ matrix.lambda.path }}/${{ matrix.lambda.name }}.zip" \
            s3://${{ secrets.S3_CODE_BUCKET_NAME }}/cta_${{ matrix.lambda.name }}.zip

  deploy_infrastructure:
    runs-on: ubuntu-latest
    needs: build_lambdas
    env:
      S3_STATE_BUCKET_NAME: ${{ secrets.S3_STATE_BUCKET_NAME }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      TF_VAR_infra_role_arn: ${{ secrets.TF_VAR_INFRA_ROLE_ARN }}
      TF_VAR_email: ${{ secrets.EMAIL }}
      TF_VAR_environment: "prod"
      TF_VAR_project_name: "ctaTrainAnalyticsApp"
      TF_VAR_aws_region_name: "us-east-2"
      TF_VAR_cta_train_tracker_api_key: ${{ secrets.CTA_TRAIN_TRACKER_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials (using OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_VAR_INFRA_ROLE_ARN }}
          aws-region: 'us-east-2'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="bucket=${S3_STATE_BUCKET_NAME}" \
            -backend-config="key=cta-train-analytics-app/terraform.tfstate" \
            -backend-config="region=us-east-2" \
            -backend-config="assume_role={role_arn=\"${TF_VAR_infra_role_arn}\", session_name=\"terraform-session\"}"

      - name: Plan Terraform
        run: |
          echo "Planning Terraform configuration..."
          terraform plan -out=tfplan

      - name: Apply Terraform
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Applying Terraform configuration..."
          terraform apply -auto-approve tfplan